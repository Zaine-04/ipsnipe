# =====================================================================================
# 🛠️  ipsnipe Configuration File - Beginner-Friendly CTF Guide
# 📋  Complete Configuration Reference for HTB Box Reconnaissance
# =====================================================================================
# 
# 🎯 THIS IS THE SINGLE SOURCE OF CONFIGURATION FOR IPSNIPE
# 📝 To customize ipsnipe, ONLY modify this file - do NOT edit the Python code!
# 
# This file controls how ipsnipe behaves during reconnaissance scans.
# All settings have been optimized for CTF environments like Hack The Box (HTB).
# 
# 💡 NEW TO CTFs? This guide explains what each setting does and why it matters!
# 
# 📚 Key Terms for Beginners:
#   • Port Scanning: Finding open services on a target machine
#   • Directory Enumeration: Finding hidden web directories and files  
#   • Web Fuzzing: Testing web applications for vulnerabilities
#   • DNS Enumeration: Finding subdomains and DNS records
#   • Timeout: How long to wait before giving up on a scan
#   • Threads: How many parallel connections to use (more = faster but louder)
# 
# 🔧 QUICK REFERENCE - Look for these boxes to find settings you can modify:
# ┌─────────────────────────────────────────────────────────────────────────────────┐
# │ MODIFY THIS VALUE: setting_name = value                                        │
# └─────────────────────────────────────────────────────────────────────────────────┘
# 
# ipsnipe - Created by hckerhub
# 🌐 Website: https://hackerhub.me
# 💻 GitHub: https://github.com/hckerhub
# ☕ Support: https://buymeacoffee.com/hckerhub
# =====================================================================================

# =====================================================================================
# 🚀 GENERAL SETTINGS - Core ipsnipe Behavior
# =====================================================================================
[general]

# ⏱️ Scan Timeout (in seconds)
# How long to wait before giving up on a scan that's taking too long
# 700 seconds = 11.7 minutes (increased for thorough scanning)
# 
# 🎯 CTF Tip: HTB machines are designed to be solved quickly, but longer timeouts ensure completeness
# 📈 Increase this if you're scanning machines with large wordlists or slow networks
# 📉 Decrease this if you want faster results and don't mind potentially missing things
# ┌─────────────────────────────────────────────────────────────────────────────────┐
# │ MODIFY THIS VALUE: scan_timeout = 700                                          │
# └─────────────────────────────────────────────────────────────────────────────────┘
scan_timeout = 700

# 🔢 Default Threads
# How many parallel connections tools will use (higher = faster but more detectable)
# 50 is a good balance between speed and stealth for CTF environments
# 
# 🎯 CTF Tip: CTF machines can handle high thread counts, so 50 is fine
# 🚨 Real-world tip: Use 10-20 threads for production systems to avoid detection
# ⚡ Increase to 100+ for very fast scans (may overwhelm some machines)
# ┌─────────────────────────────────────────────────────────────────────────────────┐
# │ MODIFY THIS VALUE: default_threads = 50                                        │
# └─────────────────────────────────────────────────────────────────────────────────┘
default_threads = 50

# 🎨 Colorized Output
# Makes scan results easier to read with colors and emojis
# Set to false if your terminal doesn't support colors
# ┌─────────────────────────────────────────────────────────────────────────────────┐
# │ MODIFY THIS VALUE: colorize_output = true                                      │
# └─────────────────────────────────────────────────────────────────────────────────┘
colorize_output = true

# 📝 Verbose Logging
# Shows detailed information about what ipsnipe is doing
# Helpful for learning and troubleshooting
# ┌─────────────────────────────────────────────────────────────────────────────────┐
# │ MODIFY THIS VALUE: verbose_logging = true                                      │
# └─────────────────────────────────────────────────────────────────────────────────┘
verbose_logging = true

# =====================================================================================
# 📚 WORDLISTS - Files containing common directory/file names to test
# =====================================================================================
[wordlists]
# 
# 🤔 What are wordlists?
# Text files containing common directory and file names like:
# admin, login, config, backup, etc.
# ipsnipe uses these to find hidden parts of websites
# 
# 🎯 CTF Strategy: Start with small wordlists for speed, use big ones if you're stuck
# 💡 Pro Tip: HTB machines usually have obvious directories, so small wordlists work well

# 📁 Base directory where wordlists are stored (STANDARD HTB/KALI LOCATION)
# ┌─────────────────────────────────────────────────────────────────────────────────┐
# │ MODIFY THIS PATH: base_dir = "/usr/share/wordlists"                             │
# └─────────────────────────────────────────────────────────────────────────────────┘
base_dir = "/usr/share/wordlists"

# 🏃‍♂️ FAST WORDLISTS (Recommended for beginners - STANDARD HTB LOCATIONS)
# Small, focused wordlists that finish quickly
# Perfect for initial reconnaissance and most CTF machines

# 🏆 HTB CHAMPION WORDLIST (Most successful in HTB environments)
# Based on extensive HTB community research - SecLists directory-list-2.3-medium.txt
# ┌─────────────────────────────────────────────────────────────────────────────────┐
# │ MODIFY THIS PATH: common = "/usr/share/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt" │
# └─────────────────────────────────────────────────────────────────────────────────┘
common = "/usr/share/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt"

# 🚀 FAST HTB RECON (Quick initial scan - 2-3 minutes)
# SecLists common.txt - Excellent hit rate for initial discovery
# ┌─────────────────────────────────────────────────────────────────────────────────┐
# │ MODIFY THIS PATH: small = "/usr/share/seclists/Discovery/Web-Content/common.txt" │
# └─────────────────────────────────────────────────────────────────────────────────┘
small = "/usr/share/seclists/Discovery/Web-Content/common.txt"

# 🎯 HTB BALANCED APPROACH (Good speed/coverage balance)
# Alternative proven HTB wordlist - raft-medium gives different ordering
# ┌─────────────────────────────────────────────────────────────────────────────────┐
# │ MODIFY THIS PATH: medium = "/usr/share/seclists/Discovery/Web-Content/raft-medium-directories.txt" │
# └─────────────────────────────────────────────────────────────────────────────────┘
medium = "/usr/share/seclists/Discovery/Web-Content/raft-medium-directories.txt"

# 💪 HTB COMPREHENSIVE (When you need maximum coverage)
# SecLists big.txt - Maximum directory coverage for stubborn machines
# ┌─────────────────────────────────────────────────────────────────────────────────┐
# │ MODIFY THIS PATH: big = "/usr/share/seclists/Discovery/Web-Content/directory-list-2.3-big.txt" │
# └─────────────────────────────────────────────────────────────────────────────────┘
big = "/usr/share/seclists/Discovery/Web-Content/directory-list-2.3-big.txt"

# 🔄 FALLBACK OPTIONS (For compatibility)
# Classic dirbuster paths as fallbacks
fallback_medium = "/usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt"
fallback_small = "/usr/share/wordlists/dirb/common.txt"
fallback_big = "/usr/share/wordlists/dirb/big.txt"

# 🚀 SECLISTS (RECOMMENDED MODERN HTB WORDLISTS)
# SecLists is now standard on modern Kali and highly recommended for HTB
# Location: /usr/share/seclists/Discovery/Web-Content/
# 
# 💡 PRO TIP: These are what most HTB pros use:
# • /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt
# • /usr/share/seclists/Discovery/Web-Content/common.txt  
# • /usr/share/seclists/Discovery/Web-Content/big.txt
# • /usr/share/seclists/Discovery/Web-Content/raft-medium-directories.txt

# 🎯 Custom HTB wordlist (Create your own!)
# You can create custom wordlists based on what you commonly find in CTFs
# Example entries: htb, hackthebox, flag, user, admin, root, api, dev, test, etc.
# ┌─────────────────────────────────────────────────────────────────────────────────┐
# │ MODIFY THIS PATH: custom = "/usr/share/wordlists/seclists/Discovery/Web-Content/common.txt" │
# │ OR CREATE YOUR OWN: custom = "/home/user/custom-htb-wordlist.txt"               │
# └─────────────────────────────────────────────────────────────────────────────────┘
custom = "/usr/share/seclists/Discovery/Web-Content/common.txt"

# =====================================================================================
# 🔧 TOOL-SPECIFIC WORDLIST PREFERENCES
# =====================================================================================
# Each tool has different purposes and should use optimized wordlists:
# • Feroxbuster: Directory/file enumeration  
# • FFUF: Virtual host/subdomain enumeration (configured in [ffuf] section)

# 🦀 FEROXBUSTER WORDLIST PREFERENCES  
# Feroxbuster is also for directory enumeration but more modern/faster
# ┌─────────────────────────────────────────────────────────────────────────────────┐
# │ MODIFY THESE VALUES for Feroxbuster's preferred wordlists:                     │
# └─────────────────────────────────────────────────────────────────────────────────┘
ferox_small = "/usr/share/seclists/Discovery/Web-Content/common.txt"
ferox_medium = "/usr/share/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt"
ferox_large = "/usr/share/seclists/Discovery/Web-Content/directory-list-2.3-big.txt"

# 🎯 HTB SPECIALIZED WORDLISTS
# API endpoints discovery
api_endpoints = "/usr/share/seclists/Discovery/Web-Content/api/api-endpoints.txt"
# Parameters discovery 
parameters = "/usr/share/seclists/Discovery/Web-Content/burp-parameter-names.txt"
# Backup files
backup_files = "/usr/share/seclists/Discovery/Web-Content/raft-medium-files.txt"

# =====================================================================================
# 🗺️ NMAP SETTINGS - Network Port Scanner
# =====================================================================================
[nmap]
# 
# 🤔 What is Nmap?
# Nmap finds open ports (services) on target machines
# Think of ports like doors - open doors mean running services you can potentially exploit
# 
# 🎯 CTF Strategy: Always start with a quick port scan, then do detailed scans on interesting ports

# 📊 Port Scanning Options

# Quick scan - how many of the most common ports to check (FAST)
# 1000 = check the 1000 most common ports (like 22, 80, 443, etc.)
# ⚡ Perfect for initial reconnaissance - finds most services quickly
# ┌─────────────────────────────────────────────────────────────────────────────────┐
# │ MODIFY THIS VALUE: quick_ports = "1000"                                        │
# └─────────────────────────────────────────────────────────────────────────────────┘
quick_ports = "1000"

# UDP scan - how many UDP ports to check
# 200 = check the 200 most common UDP ports (like 53 for DNS, 161 for SNMP)
# 🔍 UDP services are often overlooked but can provide easy wins!
# ┌─────────────────────────────────────────────────────────────────────────────────┐
# │ MODIFY THIS VALUE: udp_ports = "200"                                           │
# └─────────────────────────────────────────────────────────────────────────────────┘
udp_ports = "200"

# ⚡ Scan Speed/Stealth (T0=paranoid, T1=sneaky, T2=polite, T3=normal, T4=aggressive, T5=insane)
# T4 = aggressive (fast and loud - perfect for CTFs)
# 🎯 CTF Tip: Use T4 or T5 for speed since stealth doesn't matter in CTFs
# 🚨 Real-world tip: Use T2 or T3 to avoid detection
# ┌─────────────────────────────────────────────────────────────────────────────────┐
# │ MODIFY THIS VALUE: timing = "T4"                                               │
# └─────────────────────────────────────────────────────────────────────────────────┘
timing = "T4"

# 🚀 Minimum packet rate (packets per second)
# Higher values = faster scans but more aggressive/noisy
# 5000 = very fast, perfect for HTB where noise doesn't matter
# 🎯 CTF Tip: High min-rate speeds up scans significantly in CTF environments
# ┌─────────────────────────────────────────────────────────────────────────────────┐
# │ MODIFY THIS VALUE: min_rate = "5000"                                           │
# └─────────────────────────────────────────────────────────────────────────────────┘
min_rate = "5000"

# 🔍 Version Detection Intensity (0=light, 9=aggressive)
# Higher numbers try harder to identify exact service versions
# Version info often reveals known vulnerabilities!
# ┌─────────────────────────────────────────────────────────────────────────────────┐
# │ MODIFY THIS VALUE: version_intensity = "5"                                     │
# └─────────────────────────────────────────────────────────────────────────────────┘
version_intensity = "5"

# 🛡️ Additional Scan Options (true/false)

# Try to detect the operating system (Windows, Linux, etc.)
# Helps you know what exploits might work
# ⚠️  REQUIRES ROOT/SUDO: Set to false if not running as root
# ┌─────────────────────────────────────────────────────────────────────────────────┐
# │ MODIFY THIS VALUE: enable_os_detection = false                                 │
# └─────────────────────────────────────────────────────────────────────────────────┘
enable_os_detection = false

# Try to detect exact service versions (Apache 2.4.1, SSH 7.2, etc.)
# Version numbers often lead directly to known exploits
# ┌─────────────────────────────────────────────────────────────────────────────────┐
# │ MODIFY THIS VALUE: enable_version_detection = true                             │
# └─────────────────────────────────────────────────────────────────────────────────┘
enable_version_detection = true

# Run Nmap's vulnerability detection scripts
# Automatically checks for common vulnerabilities
# 🎯 CTF Tip: This can sometimes give you exploits immediately!
# ┌─────────────────────────────────────────────────────────────────────────────────┐
# │ MODIFY THIS VALUE: enable_script_scan = true                                   │
# └─────────────────────────────────────────────────────────────────────────────────┘
enable_script_scan = true

# Scan UDP ports in addition to TCP
# UDP services like DNS and SNMP are often misconfigured
# ⚠️  REQUIRES ROOT/SUDO: Set to false if not running as root
# ┌─────────────────────────────────────────────────────────────────────────────────┐
# │ MODIFY THIS VALUE: enable_udp_scan = false                                     │
# └─────────────────────────────────────────────────────────────────────────────────┘
enable_udp_scan = false



# =====================================================================================
# 🦀 FEROXBUSTER SETTINGS - Fast Directory Finder
# =====================================================================================
[feroxbuster]
# 
# 🤔 What is Feroxbuster?
# A modern, fast directory/file enumeration tool written in Rust
# Excellent for discovering hidden web content and directories
# 
# 🎯 CTF Tip: Great for finding admin panels, config files, and backup directories

# File extensions to check
# ┌──────────────────────────────────────────────────────────────────────────────────┐
# │ MODIFY THIS VALUE: extensions = "php,html,txt,js,css,zip,tar,gz,bak,old,json,xml"│
# └──────────────────────────────────────────────────────────────────────────────────┘
extensions = "php,html,txt,js,css,zip,tar,gz,bak,old,json,xml"

# Concurrent threads
# ┌─────────────────────────────────────────────────────────────────────────────────┐
# │ MODIFY THIS VALUE: threads = 50                                                 │
# └─────────────────────────────────────────────────────────────────────────────────┘
threads = 50

# Request timeout in seconds
# ┌─────────────────────────────────────────────────────────────────────────────────┐
# │ MODIFY THIS VALUE: timeout = 10                                                 │
# └─────────────────────────────────────────────────────────────────────────────────┘
timeout = 10

# 📊 Recursion depth (how many levels deep to search)
# 4 = if it finds /admin, it will also search /admin/*, /admin/*/*, etc.
# 🎯 CTF Tip: Depth 3-4 usually finds everything important without taking forever
# ┌─────────────────────────────────────────────────────────────────────────────────┐
# │ MODIFY THIS VALUE: depth = 4                                                    │
# └─────────────────────────────────────────────────────────────────────────────────┘
depth = 4

# Wordlist size preference (used by ipsnipe's wordlist selection)
# ┌─────────────────────────────────────────────────────────────────────────────────┐
# │ MODIFY THIS VALUE: wordlist_size = "medium"  # Options: small, medium, large    │
# └─────────────────────────────────────────────────────────────────────────────────┘
wordlist_size = "medium"  # Options: small, medium, large

# =====================================================================================
# 🔍 THEHARVESTER SETTINGS - Email and Subdomain Finder
# =====================================================================================
[theharvester]
# 
# 🤔 What is theHarvester?
# Searches public sources (Google, Bing, etc.) for email addresses and subdomains
# Useful for gathering information about the target organization
# 
# 🎯 CTF Tip: Sometimes finds employee emails or additional subdomains to attack

# 🔍 Data sources to search
# Multiple search engines provide different results
# ┌─────────────────────────────────────────────────────────────────────────────────┐
# │ MODIFY THIS VALUE: data_source = "google,bing,yahoo,duckduckgo"                │
# └─────────────────────────────────────────────────────────────────────────────────┘
data_source = "google,bing,yahoo,duckduckgo"

# 📊 Maximum results to collect
# 500 is usually enough to find everything available
# ┌─────────────────────────────────────────────────────────────────────────────────┐
# │ MODIFY THIS VALUE: limit = 500                                                 │
# └─────────────────────────────────────────────────────────────────────────────────┘
limit = 500

# ⏱️ Timeout for the entire search process
# ┌─────────────────────────────────────────────────────────────────────────────────┐
# │ MODIFY THIS VALUE: timeout = 700                                               │
# └─────────────────────────────────────────────────────────────────────────────────┘
timeout = 700



# =====================================================================================
# ⚡ FFUF SETTINGS - Fast Web Fuzzer
# =====================================================================================
[ffuf]
# 
# 🤔 What is ffuf?
# Another fast web fuzzer similar to Feroxbuster
# Known for being extremely fast and flexible
# 
# 🎯 CTF Tip: Great for parameter fuzzing and finding hidden endpoints

# File extensions to test
extensions = "php,html,txt,js,css,zip,tar,gz,bak,old,json,xml"

# Concurrent threads
threads = 40

# Request timeout
timeout = 10

# 📊 Status codes to include in results
# ┌─────────────────────────────────────────────────────────────────────────────────┐
# │ MODIFY THIS VALUE: match_codes = "200,204,301,302,307,401,403"                 │
# └─────────────────────────────────────────────────────────────────────────────────┘
match_codes = "200,204,301,302,307,401,403"

# 📏 Filter responses by size (leave empty to see all)
# Example: "1234" would hide responses that are exactly 1234 bytes
# Useful for hiding error pages that are all the same size
# Common values: "178" for default nginx, "315" for Apache default
# ┌─────────────────────────────────────────────────────────────────────────────────┐
# │ MODIFY THIS VALUE: filter_size = "178"                                         │
# └─────────────────────────────────────────────────────────────────────────────────┘
filter_size = "178"

# 🌐 FFUF scanning method
# "vhost" = Virtual host enumeration (curl -H "Host: FUZZ.domain.htb" http://IP)
# "subdomain" = Subdomain enumeration (curl http://FUZZ.domain.htb)
# ┌─────────────────────────────────────────────────────────────────────────────────┐
# │ MODIFY THIS VALUE: method = "vhost"                                            │
# └─────────────────────────────────────────────────────────────────────────────────┘
method = "vhost"

# 📋 FFUF Wordlist (specifically for subdomain/vhost enumeration)
# This should be a subdomain-focused wordlist, not directory names
# Standard HTB/Kali location for subdomain wordlists
# ┌─────────────────────────────────────────────────────────────────────────────────┐
# │ MODIFY THIS VALUE: wordlist = "/usr/share/seclists/Discovery/DNS/bitquark-subdomains-top100000.txt" │
# └─────────────────────────────────────────────────────────────────────────────────┘
wordlist = "/usr/share/seclists/Discovery/DNS/bitquark-subdomains-top100000.txt"



# =====================================================================================
# 🔍 WHATWEB SETTINGS - Technology Detection
# =====================================================================================
[whatweb]
# 
# 🤔 What is WhatWeb?
# Identifies technologies used by websites (Apache, PHP, WordPress, etc.)
# Knowing the technology stack helps you choose appropriate exploits
# 
# 🎯 CTF Tip: Version information often leads directly to known exploits

# Verbosity level (how much detail to show)
# ┌─────────────────────────────────────────────────────────────────────────────────┐
# │ MODIFY THIS VALUE: verbosity = "verbose"                                       │
# └─────────────────────────────────────────────────────────────────────────────────┘
verbosity = "verbose"

# 🚨 Aggression level (1=passive/stealthy, 3=aggressive/invasive)
# 1 = just looks at HTTP headers and page content (STEALTHY)
# 3 = actively tests for vulnerabilities (AGGRESSIVE but may trigger defenses)
# 🎯 CTF Tip: Level 1 is usually enough and much faster
# ┌─────────────────────────────────────────────────────────────────────────────────┐
# │ MODIFY THIS VALUE: aggression = 1                                              │
# └─────────────────────────────────────────────────────────────────────────────────┘
aggression = 1

# =====================================================================================
# 📋 OUTPUT SETTINGS - How Results Are Displayed and Saved
# =====================================================================================
[output]
# 
# These settings control how ipsnipe formats and saves your scan results
# Good formatting makes it easier to find important information quickly

# 📏 Maximum line length before wrapping
# Keeps output readable on normal terminal windows
# ┌─────────────────────────────────────────────────────────────────────────────────┐
# │ MODIFY THIS VALUE: max_line_length = 120                                       │
# └─────────────────────────────────────────────────────────────────────────────────┘
max_line_length = 120

# ✂️ Cut off very long lines instead of wrapping them
# Prevents output from becoming messy with extremely long URLs
# ┌─────────────────────────────────────────────────────────────────────────────────┐
# │ MODIFY THIS VALUE: truncate_long_lines = true                                  │
# └─────────────────────────────────────────────────────────────────────────────────┘
truncate_long_lines = true

# 🎯 Highlight important findings with emojis
# Makes it easy to spot important results at a glance
# 🔓 = open ports, 📁 = directories, ⚠️ = vulnerabilities, etc.
# ┌─────────────────────────────────────────────────────────────────────────────────┐
# │ MODIFY THIS VALUE: highlight_important = true                                  │
# └─────────────────────────────────────────────────────────────────────────────────┘
highlight_important = true

# 🕐 Include timestamps in all output files
# Helps you track when scans were performed
# ┌─────────────────────────────────────────────────────────────────────────────────┐
# │ MODIFY THIS VALUE: include_timestamps = true                                   │
# └─────────────────────────────────────────────────────────────────────────────────┘
include_timestamps = true

# 📊 Summary Report Options (what to include in the final report)

# Show the exact commands that were run
# Helpful for learning and reproducing results
# ┌─────────────────────────────────────────────────────────────────────────────────┐
# │ MODIFY THIS VALUE: include_command_details = true                              │
# └─────────────────────────────────────────────────────────────────────────────────┘
include_command_details = true

# Show how long each scan took
# Helps you optimize scan times and identify slow scans
# ┌─────────────────────────────────────────────────────────────────────────────────┐
# │ MODIFY THIS VALUE: include_execution_time = true                               │
# └─────────────────────────────────────────────────────────────────────────────────┘
include_execution_time = true

# Show file sizes of all output files
# Helps you identify which scans found the most results
# ┌─────────────────────────────────────────────────────────────────────────────────┐
# │ MODIFY THIS VALUE: include_file_sizes = true                                   │
# └─────────────────────────────────────────────────────────────────────────────────┘
include_file_sizes = true

# =====================================================================================
# ⚙️ CONFIGURATION MANAGEMENT - SINGLE SOURCE OF TRUTH
# =====================================================================================
#
# 🎯 IMPORTANT: This config.toml file is the SINGLE SOURCE for ALL tool settings!
#    • Both the main system (ipsnipe.py) AND legacy system use this file
#    • ipsnipe/core/config.py contains only minimal emergency fallbacks
#    • All your customizations should be made HERE in config.toml
#    • Changes here affect BOTH systems immediately
#
# 🔄 How it works:
#    1. ipsnipe loads this config.toml file as the primary configuration
#    2. Only falls back to minimal defaults if this file is missing/corrupt
#    3. Result: This file controls ALL tool behavior and timeouts
#
# 💡 This means you can:
#    • Modify any setting in this file and it will take effect immediately
#    • Add new settings here and they'll be available to ALL scanners
#    • One file controls everything - no more duplicate configurations!
#
# ✅ UNIFIED CONFIGURATION: No more confusion about which settings apply where!
#
# =====================================================================================
# 🔍 ADVANCED DNS ENUMERATION SETTINGS
# =====================================================================================
[advanced_dns]
# 
# 🤔 What is Advanced DNS Enumeration?
# Comprehensive DNS discovery using multiple techniques:
# • Zone transfers (AXFR attempts)
# • Certificate transparency logs
# • Subdomain brute force with HTB-optimized wordlists
# • Reverse DNS analysis
# • Integration with advanced tools (subfinder, amass, dnsrecon)

# Enable certificate transparency search
enable_certificate_transparency = true

# Certificate transparency API endpoint
cert_transparency_api = "https://crt.sh/?q=%.{domain}&output=json"

# Enable reverse DNS analysis on nearby IPs
enable_reverse_dns = true

# IP range for reverse DNS testing (±N from target IP)
reverse_dns_range = 10

# Enable advanced tools integration (if available)
enable_advanced_tools = true

# Advanced tools timeout (seconds)
advanced_tools_timeout = 300

# Subdomain brute force timeout per subdomain (seconds)
subdomain_timeout = 5

# Zone transfer timeout (seconds)
zone_transfer_timeout = 60

# =====================================================================================
# 🌐 ENHANCED WEB DISCOVERY SETTINGS  
# =====================================================================================
[enhanced_web]
#
# 🤔 What is Enhanced Web Discovery?
# Advanced web content discovery using multiple techniques:
# • Multi-tool directory enumeration (gobuster + custom paths)
# • JavaScript endpoint extraction
# • Sensitive file discovery
# • Parameter discovery
# • Technology fingerprinting

# Enable JavaScript analysis for endpoint discovery
enable_js_analysis = true

# Enable sensitive file discovery
enable_sensitive_files = true

# Enable parameter discovery
enable_parameter_discovery = true

# Enable robots.txt and sitemap analysis
enable_robots_analysis = true

# Request timeout for web discovery (seconds)
web_request_timeout = 10

# Maximum JavaScript files to analyze per target
max_js_files = 50

# HTB-optimized file extensions for discovery
htb_extensions = "php,html,htm,asp,aspx,jsp,txt,xml,json,js,css,zip,tar,gz,bak,old,backup,conf,config,cfg,ini,log,sql,db,sqlite,pdf,doc,docx,xls,xlsx,csv,key,pem,crt,p12"

# Maximum concurrent web discovery threads
web_discovery_threads = 20

# =====================================================================================
# 🎓 BEGINNER TIPS FOR CUSTOMIZING THIS FILE
# =====================================================================================
#
# 🚀 Want to make scans faster?
#   • Increase threads (but watch out for overwhelming the target)
#   • Decrease timeouts (but you might miss slow responses)
#   • Use smaller wordlists
#   • Set timing to T5 for Nmap
#
# 🕵️ Want more thorough scans?
#   • Use larger wordlists (medium or big)
#   • Increase timeouts
#   • Enable more Nmap scripts
#   • Increase feroxbuster depth
#
# 🎯 Stuck on a CTF machine?
#   • Try different wordlists
#   • Increase scan timeouts
#   • Add custom file extensions based on what you've found
#   • Enable more aggressive WhatWeb scanning
#
# 🛠️ Advanced customization:
#   • Create custom wordlists for specific types of challenges
#   • Adjust thread counts based on your internet speed
#   • Modify status codes based on interesting responses you've seen
#
# 💡 Remember: This file is reloaded each time you run ipsnipe,
#     so you can experiment with different settings!
#
# =====================================================================================
# 🎯 PARAMETER DISCOVERY & LFI TESTING SETTINGS
# =====================================================================================
[arjun]
# Arjun parameter discovery tool settings
threads = 25
delay = 0
timeout = 10
wordlist = "default"

[paramspider]
# ParamSpider archived parameter discovery
level = "high"
quiet = true

[wfuzz]
# WFUZZ fuzzing settings for LFI testing
threads = 20
timeout = 10
payloads = "/usr/share/seclists/Fuzzing/LFI/LFI-gracefulsecurity-linux.txt"

# =====================================================================================
# 🏗️ CMS DETECTION & ENUMERATION SETTINGS
# =====================================================================================
[cmseek]
# CMSeek CMS detection settings
threads = 10
timeout = 30
random_agent = true
follow_redirect = true

[http_enum]
# Nmap http-enum script settings
timing = "T4"
scripts = "http-enum,http-headers,http-methods,http-title"

# =====================================================================================
# 📋 QUICK SETTINGS REFERENCE - Most Commonly Modified Values
# =====================================================================================
# 
# 🔥 SPEED SETTINGS (Make scans faster/slower):
#   scan_timeout = 300           # How long to wait before giving up
#   default_threads = 50         # Parallel connections (higher = faster)
#   timing = "T4"               # Nmap timing (T1=slow, T5=insane)
#   
# 📚 WORDLIST SETTINGS (Change what directories to look for):
#   common = "/usr/share/wordlists/dirbuster/directory-list-2.3-small.txt"  # Main wordlist  
#   small = "/usr/share/wordlists/dirb/common.txt"   # Alternative wordlist
#   custom = "/usr/share/seclists/Discovery/Web-Content/common.txt"  # SecLists (recommended)
#   
# 🕷️ WEB SCANNING SETTINGS (Customize directory/file hunting):
#   extensions = "php,html,txt"  # File types to look for
#   threads = 50                # Concurrent web requests
#   depth = 4                   # How deep to recurse in directories
#   status_codes = "200,403"    # Which HTTP responses to show
#   
# 🗺️ NMAP SETTINGS (Port scanning behavior):
#   quick_ports = "1000"        # How many ports to scan quickly
#   udp_ports = "200"          # UDP ports to check
#   version_intensity = "5"     # How hard to try detecting versions
#
# =====================================================================================
# 🎯 FULL SNIPER MODE SETTINGS - Complete Reconnaissance Suite  
# =====================================================================================
[full_sniper_mode]
#
# 🤔 What is Full Sniper Mode?
# A comprehensive reconnaissance workflow that runs ALL tools in optimized order:
# • Phase 1: Network Discovery (nmap scans)
# • Phase 2: DNS & Domain Intelligence (DNS enumeration, theHarvester)  
# • Phase 3: Web Application Analysis (web scanners, CMS detection, parameter testing)
#
# Each phase feeds intelligence to the next for maximum effectiveness!

# Enable automatic intelligence flow between tools
# When enabled, each tool's results enhance the next tool's effectiveness
enable_intelligence_flow = true

# Show detailed command information for each tool execution
# Displays the exact command that was run for learning purposes
show_command_details = true

# Generate comprehensive reports after each tool completes
# Creates detailed output files with command info and results
generate_detailed_reports = true

# Pause between phases to review results (useful for learning)
# Set to true if you want to manually review each phase before continuing
pause_between_phases = false

# Automatically skip tools that fail and continue with remaining tools
# Prevents one failed tool from stopping the entire reconnaissance
auto_skip_failed_tools = true

# Maximum time to wait for all tools to complete (in seconds)
# 0 = no overall timeout, rely on individual tool timeouts
# 2700 = 45 minutes maximum for entire Full Sniper Mode execution
max_total_execution_time = 0

# Tool execution order (DO NOT MODIFY unless you understand dependencies)
# This order is optimized for intelligence flow between tools
execution_order = [
    "nmap_full",       # Aggressive comprehensive port scan with high min-rate - provides service details  
    "nmap_udp",        # UDP services - often overlooked attack vectors
    "dns_enumeration", # Basic DNS - uses discovered domains from nmap
    "advanced_dns",    # Advanced DNS - certificate transparency, zone transfers
    "theharvester",    # OSINT gathering - email addresses, additional subdomains
    "enhanced_web",    # Advanced web discovery - uses all discovered info
    "feroxbuster",     # Directory enumeration - uses discovered web ports/domains
    "ffuf",           # Virtual host enumeration - uses discovered domains
    "cms_scan",       # CMS detection - uses discovered web services
    "param_lfi_scan"  # Parameter/LFI testing - uses discovered web endpoints
]

# Show progress indicators during Full Sniper Mode execution
show_progress_indicators = true

# Create timestamped checkpoint files during execution
# Allows resuming if interrupted (future feature)
create_checkpoints = false

# ===================================================================================== 